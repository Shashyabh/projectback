{
    "sourceFile": "routes/userRoute.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1730476475290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730477184985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMemers =  existingMember.concat(userIds);\r\n+        await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : null ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730477351993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,243 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMemers =  existingMember.concat(userIds);\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : null ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730477360677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,243 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMemers =  existingMember.concat(userIds);\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : null ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member fetch successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730477397423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMemers =  existingMember.concat(userIds);\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers}).populate('members');\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : newUser?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            })  ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member fetch successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730477411189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMemers =  existingMember.concat(userIds);\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers}).populate('members');\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : newUser?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            })  ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member fetch successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730477423277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,11 +200,8 @@\n                 }\r\n             })  ,\r\n             msg : 'Member added successfully'\r\n         })\r\n-\r\n-\r\n-\r\n     }catch(error){\r\n         return res.json({\r\n             status : false ,\r\n             data : null ,\r\n@@ -243,1127 +240,4 @@\n     }\r\n })\r\n \r\n module.exports = userRoutes\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { User } = require('../models/User');\r\n-const { ValidateToken } = require('../middleware/validatetoken');\r\n-const userRoutes =  express.Router();\r\n-\r\n-userRoutes.post(\"/register\"  , async(req , res) => {\r\n-    try{\r\n-        // console.log(req);\r\n-        const { name , email , password , confirmPassword }  = req.body ;\r\n-        if( !name || !email || !confirmPassword || !password ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  password != confirmPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Passwords are not same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists'\r\n-            })\r\n-        }\r\n-        const hashedPassword = await bcrypt.hash(password, 10);\r\n-        const user =  new User({\r\n-            name , email , password : hashedPassword , mentor : [] \r\n-        })\r\n-        const newUser =  await user.save();\r\n-\r\n-        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-        return res.json({\r\n-            status :true , \r\n-            data : { token  , name , email } ,\r\n-            msg : 'Sucessfully register '\r\n-        })\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-userRoutes.post(\"/login\"  , async(req , res) => {\r\n-    try{\r\n-        const { email , password } =  req.body ;\r\n-        if( !email || !password){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'Email & Password Required'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( !isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not exists'\r\n-            })\r\n-        }\r\n-        let isMatch = await bcrypt.compare(password , isUser.password);\r\n-        if( isMatch){\r\n-            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-\r\n-            return res.json({\r\n-                status : true  ,\r\n-                data : { token , email : isUser.email , name : isUser.name},\r\n-                msg : 'Login Successfully'\r\n-            })\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n-    try{\r\n-        const { name , email , oldPassword , newPassword } =  req.body ;\r\n-        if( !name || !email || !oldPassword || !newPassword ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  oldPassword == newPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Current and New Passwrod is same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists with email. Try with different email'\r\n-            })\r\n-        }\r\n-        let user =  await User.findOne({ _id : req.userId});\r\n-\r\n-        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n-        if( isMatch){\r\n-            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n-            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n-            return res.json({\r\n-                status : true ,\r\n-                data : { name  , email },\r\n-                msg : 'Profile Updated'\r\n-            })\r\n-\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Old Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n-    try{\r\n-        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : users?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'All User fetched'\r\n-        })\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n-    try{\r\n-        const { userIds } = req.body ;\r\n-        // userIds should be array => [\"userid1\"]\r\n-        const user = await User.findOne({ _id : req.userId });\r\n-        if( !user){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not found'\r\n-            })\r\n-        }\r\n-        let existingMember = user.members ;\r\n-        let newMemers =  existingMember.concat(userIds);\r\n-        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers}).populate('members');\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : newUser?.members?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            })  ,\r\n-            msg : 'Member added successfully'\r\n-        })\r\n-\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n-    try{\r\n-        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n-        if( !user){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not found'\r\n-            })\r\n-        }\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : user?.members?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'Member fetch successfully'\r\n-        })\r\n-\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-module.exports = userRoutes\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { User } = require('../models/User');\r\n-const { ValidateToken } = require('../middleware/validatetoken');\r\n-const userRoutes =  express.Router();\r\n-\r\n-userRoutes.post(\"/register\"  , async(req , res) => {\r\n-    try{\r\n-        // console.log(req);\r\n-        const { name , email , password , confirmPassword }  = req.body ;\r\n-        if( !name || !email || !confirmPassword || !password ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  password != confirmPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Passwords are not same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists'\r\n-            })\r\n-        }\r\n-        const hashedPassword = await bcrypt.hash(password, 10);\r\n-        const user =  new User({\r\n-            name , email , password : hashedPassword , mentor : [] \r\n-        })\r\n-        const newUser =  await user.save();\r\n-\r\n-        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-        return res.json({\r\n-            status :true , \r\n-            data : { token  , name , email } ,\r\n-            msg : 'Sucessfully register '\r\n-        })\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-userRoutes.post(\"/login\"  , async(req , res) => {\r\n-    try{\r\n-        const { email , password } =  req.body ;\r\n-        if( !email || !password){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'Email & Password Required'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( !isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not exists'\r\n-            })\r\n-        }\r\n-        let isMatch = await bcrypt.compare(password , isUser.password);\r\n-        if( isMatch){\r\n-            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-\r\n-            return res.json({\r\n-                status : true  ,\r\n-                data : { token , email : isUser.email , name : isUser.name},\r\n-                msg : 'Login Successfully'\r\n-            })\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n-    try{\r\n-        const { name , email , oldPassword , newPassword } =  req.body ;\r\n-        if( !name || !email || !oldPassword || !newPassword ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  oldPassword == newPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Current and New Passwrod is same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists with email. Try with different email'\r\n-            })\r\n-        }\r\n-        let user =  await User.findOne({ _id : req.userId});\r\n-\r\n-        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n-        if( isMatch){\r\n-            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n-            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n-            return res.json({\r\n-                status : true ,\r\n-                data : { name  , email },\r\n-                msg : 'Profile Updated'\r\n-            })\r\n-\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Old Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n-    try{\r\n-        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : users?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'All User fetched'\r\n-        })\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n-    try{\r\n-        const { userIds } = req.body ;\r\n-        // userIds should be array => [\"userid1\"]\r\n-        const user = await User.findOne({ _id : req.userId });\r\n-        if( !user){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not found'\r\n-            })\r\n-        }\r\n-        let existingMember = user.members ;\r\n-        let newMemers =  existingMember.concat(userIds);\r\n-        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : null ,\r\n-            msg : 'Member added successfully'\r\n-        })\r\n-\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n-    try{\r\n-        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n-        if( !user){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not found'\r\n-            })\r\n-        }\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : user?.members?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'Member fetch successfully'\r\n-        })\r\n-\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-module.exports = userRoutes\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { User } = require('../models/User');\r\n-const { ValidateToken } = require('../middleware/validatetoken');\r\n-const userRoutes =  express.Router();\r\n-\r\n-userRoutes.post(\"/register\"  , async(req , res) => {\r\n-    try{\r\n-        // console.log(req);\r\n-        const { name , email , password , confirmPassword }  = req.body ;\r\n-        if( !name || !email || !confirmPassword || !password ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  password != confirmPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Passwords are not same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists'\r\n-            })\r\n-        }\r\n-        const hashedPassword = await bcrypt.hash(password, 10);\r\n-        const user =  new User({\r\n-            name , email , password : hashedPassword , mentor : [] \r\n-        })\r\n-        const newUser =  await user.save();\r\n-\r\n-        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-        return res.json({\r\n-            status :true , \r\n-            data : { token  , name , email } ,\r\n-            msg : 'Sucessfully register '\r\n-        })\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-userRoutes.post(\"/login\"  , async(req , res) => {\r\n-    try{\r\n-        const { email , password } =  req.body ;\r\n-        if( !email || !password){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'Email & Password Required'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( !isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not exists'\r\n-            })\r\n-        }\r\n-        let isMatch = await bcrypt.compare(password , isUser.password);\r\n-        if( isMatch){\r\n-            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-\r\n-            return res.json({\r\n-                status : true  ,\r\n-                data : { token , email : isUser.email , name : isUser.name},\r\n-                msg : 'Login Successfully'\r\n-            })\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n-    try{\r\n-        const { name , email , oldPassword , newPassword } =  req.body ;\r\n-        if( !name || !email || !oldPassword || !newPassword ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  oldPassword == newPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Current and New Passwrod is same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists with email. Try with different email'\r\n-            })\r\n-        }\r\n-        let user =  await User.findOne({ _id : req.userId});\r\n-\r\n-        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n-        if( isMatch){\r\n-            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n-            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n-            return res.json({\r\n-                status : true ,\r\n-                data : { name  , email },\r\n-                msg : 'Profile Updated'\r\n-            })\r\n-\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Old Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n-    try{\r\n-        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : users?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'All User fetched'\r\n-        })\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n-    try{\r\n-        const { userIds } = req.body ;\r\n-        // userIds should be array => [\"userid1\"]\r\n-        const user = await User.findOne({ _id : req.userId });\r\n-        if( !user){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not found'\r\n-            })\r\n-        }\r\n-        let existingMember = user.members ;\r\n-        let newMemers =  existingMember.concat(userIds);\r\n-        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : null ,\r\n-            msg : 'Member added successfully'\r\n-        })\r\n-\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n-    try{\r\n-        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n-        if( !user){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not found'\r\n-            })\r\n-        }\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : user?.members?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'Member added successfully'\r\n-        })\r\n-\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-module.exports = userRoutes\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { User } = require('../models/User');\r\n-const { ValidateToken } = require('../middleware/validatetoken');\r\n-const userRoutes =  express.Router();\r\n-\r\n-userRoutes.post(\"/register\"  , async(req , res) => {\r\n-    try{\r\n-        // console.log(req);\r\n-        const { name , email , password , confirmPassword }  = req.body ;\r\n-        if( !name || !email || !confirmPassword || !password ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  password != confirmPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Passwords are not same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists'\r\n-            })\r\n-        }\r\n-        const hashedPassword = await bcrypt.hash(password, 10);\r\n-        const user =  new User({\r\n-            name , email , password : hashedPassword , mentor : [] \r\n-        })\r\n-        const newUser =  await user.save();\r\n-\r\n-        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-        return res.json({\r\n-            status :true , \r\n-            data : { token  , name , email } ,\r\n-            msg : 'Sucessfully register '\r\n-        })\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-userRoutes.post(\"/login\"  , async(req , res) => {\r\n-    try{\r\n-        const { email , password } =  req.body ;\r\n-        if( !email || !password){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'Email & Password Required'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( !isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not exists'\r\n-            })\r\n-        }\r\n-        let isMatch = await bcrypt.compare(password , isUser.password);\r\n-        if( isMatch){\r\n-            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-\r\n-            return res.json({\r\n-                status : true  ,\r\n-                data : { token , email : isUser.email , name : isUser.name},\r\n-                msg : 'Login Successfully'\r\n-            })\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n-    try{\r\n-        const { name , email , oldPassword , newPassword } =  req.body ;\r\n-        if( !name || !email || !oldPassword || !newPassword ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  oldPassword == newPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Current and New Passwrod is same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists with email. Try with different email'\r\n-            })\r\n-        }\r\n-        let user =  await User.findOne({ _id : req.userId});\r\n-\r\n-        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n-        if( isMatch){\r\n-            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n-            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n-            return res.json({\r\n-                status : true ,\r\n-                data : { name  , email },\r\n-                msg : 'Profile Updated'\r\n-            })\r\n-\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Old Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n-    try{\r\n-        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : users?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'All User fetched'\r\n-        })\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n-    try{\r\n-        const { userIds } = req.body ;\r\n-        // userIds should be array => [\"userid1\"]\r\n-        const user = await User.findOne({ _id : req.userId });\r\n-        if( !user){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not found'\r\n-            })\r\n-        }\r\n-        let existingMember = user.members ;\r\n-        let newMemers =  existingMember.concat(userIds);\r\n-        await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : null ,\r\n-            msg : 'Member added successfully'\r\n-        })\r\n-\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-module.exports = userRoutes\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { User } = require('../models/User');\r\n-const { ValidateToken } = require('../middleware/validatetoken');\r\n-const userRoutes =  express.Router();\r\n-\r\n-userRoutes.post(\"/register\"  , async(req , res) => {\r\n-    try{\r\n-        // console.log(req);\r\n-        const { name , email , password , confirmPassword }  = req.body ;\r\n-        if( !name || !email || !confirmPassword || !password ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  password != confirmPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Passwords are not same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists'\r\n-            })\r\n-        }\r\n-        const hashedPassword = await bcrypt.hash(password, 10);\r\n-        const user =  new User({\r\n-            name , email , password : hashedPassword , mentor : [] \r\n-        })\r\n-        const newUser =  await user.save();\r\n-\r\n-        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-        return res.json({\r\n-            status :true , \r\n-            data : { token  , name , email } ,\r\n-            msg : 'Sucessfully register '\r\n-        })\r\n-\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-userRoutes.post(\"/login\"  , async(req , res) => {\r\n-    try{\r\n-        const { email , password } =  req.body ;\r\n-        if( !email || !password){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'Email & Password Required'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ email : email});\r\n-        if( !isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User not exists'\r\n-            })\r\n-        }\r\n-        let isMatch = await bcrypt.compare(password , isUser.password);\r\n-        if( isMatch){\r\n-            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n-\r\n-            return res.json({\r\n-                status : true  ,\r\n-                data : { token , email : isUser.email , name : isUser.name},\r\n-                msg : 'Login Successfully'\r\n-            })\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n-    try{\r\n-        const { name , email , oldPassword , newPassword } =  req.body ;\r\n-        if( !name || !email || !oldPassword || !newPassword ){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Required field name email password'\r\n-            })\r\n-        }\r\n-        if(  oldPassword == newPassword){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg :  'Current and New Passwrod is same'\r\n-            })\r\n-        }\r\n-        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n-        if( isUser){\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'User already exists with email. Try with different email'\r\n-            })\r\n-        }\r\n-        let user =  await User.findOne({ _id : req.userId});\r\n-\r\n-        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n-        if( isMatch){\r\n-            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n-            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n-            return res.json({\r\n-                status : true ,\r\n-                data : { name  , email },\r\n-                msg : 'Profile Updated'\r\n-            })\r\n-\r\n-        }else{\r\n-            return res.json({\r\n-                status : false ,\r\n-                data : null ,\r\n-                msg : 'In Correct Old Password '\r\n-            })\r\n-        }\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n-    try{\r\n-        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n-        return res.json({\r\n-            status : true ,\r\n-            data : users?.map((item) => {\r\n-                return {\r\n-                    userId : item?._id ,\r\n-                    name : item?.name ,\r\n-                    email : item?.email\r\n-                }\r\n-            }) ,\r\n-            msg : 'All User fetched'\r\n-        })\r\n-\r\n-    }catch(error){\r\n-        return res.json({\r\n-            status : false ,\r\n-            data : null ,\r\n-            msg : error.message\r\n-        })\r\n-    }\r\n-})\r\n-\r\n-module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730478124016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+const mongoose = require('mongoose');\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMemers =  existingMember.concat(userIds);\r\n+        newMembers = [...new Set(newMembers.map(id => id.toString()))].map(id => mongoose.Types.ObjectId(id));\r\n+\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers} , { new : true , lean : true }).populate('members');\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : newUser?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            })  ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member fetch successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730478206169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+const mongoose = require('mongoose');\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMembers =  existingMember.concat(userIds);\r\n+        newMembers = [...new Set(newMembers.map(id => id.toString()))].map(id => mongoose.Types.ObjectId(id));\r\n+\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMemers} , { new : true , lean : true }).populate('members');\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : newUser?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            })  ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member fetch successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730478213177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+const mongoose = require('mongoose');\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMembers =  existingMember.concat(userIds);\r\n+        newMembers = [...new Set(newMembers.map(id => id.toString()))].map(id => mongoose.Types.ObjectId(id));\r\n+\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMembers} , { new : true , lean : true }).populate('members');\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : newUser?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            })  ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member fetch successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                },
                {
                    "date": 1730478311808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { User } = require('../models/User');\r\n+const { ValidateToken } = require('../middleware/validatetoken');\r\n+const userRoutes =  express.Router();\r\n+const mongoose = require('mongoose');\r\n+\r\n+userRoutes.post(\"/register\"  , async(req , res) => {\r\n+    try{\r\n+        // console.log(req);\r\n+        const { name , email , password , confirmPassword }  = req.body ;\r\n+        if( !name || !email || !confirmPassword || !password ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  password != confirmPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Passwords are not same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists'\r\n+            })\r\n+        }\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n+        const user =  new User({\r\n+            name , email , password : hashedPassword , mentor : [] \r\n+        })\r\n+        const newUser =  await user.save();\r\n+\r\n+        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+        return res.json({\r\n+            status :true , \r\n+            data : { token  , name , email } ,\r\n+            msg : 'Sucessfully register '\r\n+        })\r\n+\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+userRoutes.post(\"/login\"  , async(req , res) => {\r\n+    try{\r\n+        const { email , password } =  req.body ;\r\n+        if( !email || !password){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'Email & Password Required'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ email : email});\r\n+        if( !isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not exists'\r\n+            })\r\n+        }\r\n+        let isMatch = await bcrypt.compare(password , isUser.password);\r\n+        if( isMatch){\r\n+            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n+\r\n+            return res.json({\r\n+                status : true  ,\r\n+                data : { token , email : isUser.email , name : isUser.name},\r\n+                msg : 'Login Successfully'\r\n+            })\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n+    try{\r\n+        const { name , email , oldPassword , newPassword } =  req.body ;\r\n+        if( !name || !email || !oldPassword || !newPassword ){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Required field name email password'\r\n+            })\r\n+        }\r\n+        if(  oldPassword == newPassword){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg :  'Current and New Passwrod is same'\r\n+            })\r\n+        }\r\n+        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n+        if( isUser){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User already exists with email. Try with different email'\r\n+            })\r\n+        }\r\n+        let user =  await User.findOne({ _id : req.userId});\r\n+\r\n+        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n+        if( isMatch){\r\n+            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n+            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n+            return res.json({\r\n+                status : true ,\r\n+                data : { name  , email },\r\n+                msg : 'Profile Updated'\r\n+            })\r\n+\r\n+        }else{\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'In Correct Old Password '\r\n+            })\r\n+        }\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n+    try{\r\n+        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : users?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'All User fetched'\r\n+        })\r\n+\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.post('/addMember' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const { userIds } = req.body ;\r\n+        // userIds should be array => [\"userid1\"]\r\n+        const user = await User.findOne({ _id : req.userId });\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        let existingMember = user.members ;\r\n+        let newMembers =  existingMember.concat(userIds);\r\n+        newMembers = [...new Set(newMembers.map(id => id.toString()))];\r\n+\r\n+        const newUser = await User.findOneAndUpdate({ _id : user?._id} , { members : newMembers} , { new : true , lean : true }).populate('members');\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : newUser?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            })  ,\r\n+            msg : 'Member added successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+userRoutes.get('/getMembers' , ValidateToken , async(req , res) => {\r\n+    try{\r\n+        const user = await User.findOne({ _id : req.userId }).populate('members' ,'_id name email' );\r\n+        if( !user){\r\n+            return res.json({\r\n+                status : false ,\r\n+                data : null ,\r\n+                msg : 'User not found'\r\n+            })\r\n+        }\r\n+        return res.json({\r\n+            status : true ,\r\n+            data : user?.members?.map((item) => {\r\n+                return {\r\n+                    userId : item?._id ,\r\n+                    name : item?.name ,\r\n+                    email : item?.email\r\n+                }\r\n+            }) ,\r\n+            msg : 'Member fetch successfully'\r\n+        })\r\n+    }catch(error){\r\n+        return res.json({\r\n+            status : false ,\r\n+            data : null ,\r\n+            msg : error.message\r\n+        })\r\n+    }\r\n+})\r\n+\r\n+module.exports = userRoutes\r\n"
                }
            ],
            "date": 1730476475290,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst { User } = require('../models/User');\r\nconst { ValidateToken } = require('../middleware/validatetoken');\r\nconst userRoutes =  express.Router();\r\n\r\nuserRoutes.post(\"/register\"  , async(req , res) => {\r\n    try{\r\n        // console.log(req);\r\n        const { name , email , password , confirmPassword }  = req.body ;\r\n        if( !name || !email || !confirmPassword || !password ){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg :  'Required field name email password'\r\n            })\r\n        }\r\n        if(  password != confirmPassword){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg :  'Passwords are not same'\r\n            })\r\n        }\r\n        const isUser =  await User.findOne({ email : email});\r\n        if( isUser){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg : 'User already exists'\r\n            })\r\n        }\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        const user =  new User({\r\n            name , email , password : hashedPassword , mentor : [] \r\n        })\r\n        const newUser =  await user.save();\r\n\r\n        const token = jwt.sign({ userId : newUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n        return res.json({\r\n            status :true , \r\n            data : { token  , name , email } ,\r\n            msg : 'Sucessfully register '\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        return res.json({\r\n            status : false ,\r\n            data : null ,\r\n            msg : error.message\r\n        })\r\n    }\r\n})\r\nuserRoutes.post(\"/login\"  , async(req , res) => {\r\n    try{\r\n        const { email , password } =  req.body ;\r\n        if( !email || !password){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg : 'Email & Password Required'\r\n            })\r\n        }\r\n        const isUser =  await User.findOne({ email : email});\r\n        if( !isUser){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg : 'User not exists'\r\n            })\r\n        }\r\n        let isMatch = await bcrypt.compare(password , isUser.password);\r\n        if( isMatch){\r\n            const token = jwt.sign({ userId : isUser?._id} ,process.env.SECRET_KEY ,  { expiresIn: '24h'})\r\n\r\n            return res.json({\r\n                status : true  ,\r\n                data : { token , email : isUser.email , name : isUser.name},\r\n                msg : 'Login Successfully'\r\n            })\r\n        }else{\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg : 'In Correct Password '\r\n            })\r\n        }\r\n\r\n    }catch(error){\r\n        return res.json({\r\n            status : false ,\r\n            data : null ,\r\n            msg : error.message\r\n        })\r\n    }\r\n})\r\n\r\nuserRoutes.post(\"/updateProfile\"  , ValidateToken,  async(req , res) => {\r\n    try{\r\n        const { name , email , oldPassword , newPassword } =  req.body ;\r\n        if( !name || !email || !oldPassword || !newPassword ){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg :  'Required field name email password'\r\n            })\r\n        }\r\n        if(  oldPassword == newPassword){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg :  'Current and New Passwrod is same'\r\n            })\r\n        }\r\n        const isUser =  await User.findOne({ _id : { $ne : req.userId } ,  email : email});\r\n        if( isUser){\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg : 'User already exists with email. Try with different email'\r\n            })\r\n        }\r\n        let user =  await User.findOne({ _id : req.userId});\r\n\r\n        let isMatch = await bcrypt.compare(oldPassword , user.password);\r\n        if( isMatch){\r\n            const  hashedPassword = await bcrypt.hash(newPassword , 10);\r\n            await User.updateOne({ _id : user?._id} , { name , email , passwrod : hashedPassword});\r\n            return res.json({\r\n                status : true ,\r\n                data : { name  , email },\r\n                msg : 'Profile Updated'\r\n            })\r\n\r\n        }else{\r\n            return res.json({\r\n                status : false ,\r\n                data : null ,\r\n                msg : 'In Correct Old Password '\r\n            })\r\n        }\r\n\r\n    }catch(error){\r\n        return res.json({\r\n            status : false ,\r\n            data : null ,\r\n            msg : error.message\r\n        })\r\n    }\r\n})\r\n\r\nuserRoutes.get(\"/getUsers\" , ValidateToken  , async(req , res) => {\r\n    try{\r\n        const users =  await User.find({ _id : { $ne :  req.userId }});\r\n        return res.json({\r\n            status : true ,\r\n            data : users?.map((item) => {\r\n                return {\r\n                    userId : item?._id ,\r\n                    name : item?.name ,\r\n                    email : item?.email\r\n                }\r\n            }) ,\r\n            msg : 'All User fetched'\r\n        })\r\n\r\n    }catch(error){\r\n        return res.json({\r\n            status : false ,\r\n            data : null ,\r\n            msg : error.message\r\n        })\r\n    }\r\n})\r\n\r\nmodule.exports = userRoutes\r\n"
        }
    ]
}